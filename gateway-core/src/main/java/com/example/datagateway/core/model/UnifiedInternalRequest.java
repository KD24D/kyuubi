package com.example.datagateway.core.model;

import lombok.Builder;
import lombok.Value;

import java.util.Map;

/**
 * Represents a standardized internal request within the Data Gateway,
 * converted from a protocol-specific incoming request.
 */
@Value
@Builder
public class UnifiedInternalRequest {
    /**
     * Unique identifier for tracing and logging this request throughout its lifecycle in the gateway.
     * This ID might be propagated from the source system or generated by the gateway.
     */
    String requestId;

    /**
     * The actual data payload of the request.
     * This is kept as a raw type (e.g., byte[], String) initially.
     * Subsequent layers (e.g., Format Normalization) will parse this.
     */
    Object payload;

    /**
     * The determined or declared type of the payload.
     * This helps the next layer (Format Normalization & Validation) to select the correct parser.
     */
    PayloadType payloadType;

    /**
     * Information about the source of this request.
     */
    SourceInfo sourceInfo;

    /**
     * A map of key-value pairs containing protocol-specific headers or metadata
     * from the original request (e.g., HTTP headers, Kafka message headers).
     * This metadata can be used for routing, transformation, or auditing.
     */
    Map<String, String> metadata;

    /**
     * Timestamp in milliseconds since the Unix epoch, marking when the gateway
     * first received this request.
     */
    long receivedTimestamp;

    /**
     * The original encoding of the payload, if applicable and known (e.g., UTF-8, Base64).
     * This is particularly relevant for text-based payloads or binary payloads that were encoded.
     */
    String originalEncoding;
}
